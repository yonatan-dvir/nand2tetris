// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //zx
    Mux16 (a=x, b=false, sel=zx, out=zerox);
    //nx
    Not16(in=zerox, out=notx);
    Mux16(a=zerox, b=notx, sel=nx, out=negx);
    //zy
    Mux16 (a=y, b=false, sel=zy, out=zeroy);
    //ny
    Not16(in=zeroy, out=noty);
    Mux16(a=zeroy, b=noty, sel=ny, out=negy);
    //f
    Add16(a=negx, b=negy, out=addxy);
    And16(a=negx, b=negy, out=andxy);
    Mux16(a=andxy, b=addxy, sel=f, out=addorandxy);
    // no, ng
    Not16(in=addorandxy, out=notaddorandxy);
    Mux16(a=addorandxy, b=notaddorandxy, sel=no, out=out, out[0..7] = right, out[8..15] = left, out[15] = ng);
    // zr
    Or8Way(in=left, out=is1inleft);
    Or8Way(in=right, out=is1inright);
    Or(a=is1inleft, b=is1inright, out=is1inout);
    Not(in=is1inout, out=zr);
}
